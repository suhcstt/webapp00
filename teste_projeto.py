# -*- coding: utf-8 -*-
"""Teste_Projeto_PY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JeYRx8cJBX8QtiJYYCf_8cFaYQAHpqwM
"""

!pip install gspread
!pip install streamlit

from google.colab import auth
import gspread
from gspread_dataframe import get_as_dataframe, set_with_dataframe
# Autentique sua conta do Google
auth.authenticate_user()
# Autorize o acesso ao Google Sheets
from google.auth import default
creds, _ = default()
client = gspread.authorize(creds)
# Use o link ou o ID da planilha para acessá-la:
spreadsheet_url = "https://docs.google.com/spreadsheets/d/1fpec5h4xGCbkGNox8alWPVYpmNT1KoinXqIj70eja-I/edit?usp=sharing"
# Abra a planilha pelo URL
spreadsheet = client.open_by_url(spreadsheet_url)
# Selecione uma aba (sheet)
sheet = spreadsheet.sheet1  # Primeiro aba
# Obtenha todos os valores
data = sheet.get_all_records()
print(data)

import pandas as pd

# Converte os dados em um DataFrame
df = pd.DataFrame(data)

# Visualiza as primeiras linhas para confirmar
print(df.head())

df.rename(columns={
    'Dt': 'Data',
    'Lote': 'Lote',
    'Item': 'Item',
    'Maquina': 'Máquina',
    'Quantidade': 'Quantidade_Total',
    'Scrap': 'Quantidade_Scrap',
    '% REPROVA': 'Porcentagem_Reprova',
    'Setor': 'Setor',
    'Erro': 'Erro'
}, inplace=True)

# Tratar valores ausentes
df.dropna(subset=['Máquina', 'Quantidade_Scrap'], inplace=True)

# Converter a coluna Data para datetime
df['Data'] = pd.to_datetime(df['Data'], errors='coerce')

#Quantidade de scrap por máquina:

scrap_por_maquina = df.groupby('Máquina')['Quantidade_Scrap'].sum()
print(scrap_por_maquina)


#Custo total de scrap por setor:

custo_por_setor = df.groupby('Setor')['Quantidade_Scrap'].sum()
print(custo_por_setor)

import matplotlib.pyplot as plt
import seaborn as sns

# Configuração do estilo dos gráficos
sns.set(style="whitegrid")

# Gráfico 1: Distribuição de scrap por máquina (Gráfico de barras)
def grafico_scrap_por_maquina(df):
    scrap_por_maquina = df.groupby('Máquina')['Quantidade_Scrap'].sum()
    plt.figure(figsize=(10, 6))
    sns.barplot(x=scrap_por_maquina.values, y=scrap_por_maquina.index, palette="Blues")  # Paleta azul
    plt.title('Distribuição de Scrap por Máquina', fontsize=16)
    plt.xlabel('Quantidade de Scrap', fontsize=12)
    plt.ylabel('Máquina', fontsize=12)
    plt.tight_layout()
    plt.show()

# Gráfico 2: Custo total de scrap por setor (Gráfico de barras horizontais)
def grafico_custo_por_setor(df):
    custo_por_setor = df.groupby('Setor')['Quantidade_Scrap'].sum()
    plt.figure(figsize=(10, 6))
    sns.barplot(x=custo_por_setor.values, y=custo_por_setor.index, palette="Blues_d")  # Paleta azul escuro
    plt.title('Custo Total de Scrap por Setor', fontsize=16)
    plt.xlabel('Quantidade de Scrap', fontsize=12)
    plt.ylabel('Setor', fontsize=12)
    plt.tight_layout()
    plt.show()

# Gráfico 3: Evolução temporal do número de scraps (Gráfico de linhas)
def grafico_evolucao_scrap(df):
    df['Ano_Mes'] = df['Data'].dt.to_period('M')  # Agrupar por mês
    scrap_temporal = df.groupby('Ano_Mes')['Quantidade_Scrap'].sum()
    plt.figure(figsize=(10, 6))
    scrap_temporal.plot(kind='line', marker='o', color="#1f77b4")  # Cor azul
    plt.title('Evolução Temporal do Número de Scraps', fontsize=16)
    plt.xlabel('Data', fontsize=12)
    plt.ylabel('Quantidade de Scrap', fontsize=12)
    plt.tight_layout()
    plt.show()

# Gerar todos os gráficos
grafico_scrap_por_maquina(df)
grafico_custo_por_setor(df)
grafico_evolucao_scrap(df)